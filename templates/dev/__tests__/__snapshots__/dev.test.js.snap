// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`dev templates renders dev templates correctly 1`] = `
{
  "Description": "This template creates dev ApiGateway",
  "Outputs": {
    "ApiId": {
      "Value": {
        "Ref": "API",
      },
    },
    "Stage": {
      "Value": "test",
    },
  },
  "Resources": {
    "API": {
      "Properties": {
        "Name": "test",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "Deployment": {
      "DependsOn": "get",
      "Properties": {
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "Stage": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W64",
              "reason": "This apiGateway stage does not require to be associated with a usage plan",
            },
            {
              "id": "W69",
              "reason": "This apiGateway stage does not require to have access logging",
            },
          ],
        },
      },
      "Properties": {
        "DeploymentId": {
          "Ref": "Deployment",
        },
        "RestApiId": {
          "Ref": "API",
        },
        "StageName": "test",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "get": {
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": "{}",
              },
              "StatusCode": "200",
            },
          ],
          "RequestTemplates": {
            "application/json": "{"statusCode": 200}",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
          },
        ],
        "ResourceId": {
          "Fn::GetAtt": [
            "API",
            "RootResourceId",
          ],
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
  },
}
`;

exports[`dev templates renders dev templates correctly 2`] = `
{
  "Description": "This template creates dev ElasticSearch Cluster",
  "Outputs": {
    "Client": {
      "Value": {
        "Ref": "Client",
      },
    },
    "IdPool": {
      "Value": {
        "Ref": "IdPool",
      },
    },
    "Role": {
      "Value": {
        "Fn::GetAtt": [
          "Role",
          "Arn",
        ],
      },
    },
    "UserPool": {
      "Value": {
        "Ref": "UserPool",
      },
    },
  },
  "Resources": {
    "Client": {
      "Properties": {
        "ClientName": {
          "Fn::Join": [
            "-",
            [
              "UserPool",
              {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
        "GenerateSecret": false,
        "UserPoolId": {
          "Ref": "UserPool",
        },
      },
      "Type": "AWS::Cognito::UserPoolClient",
    },
    "IdPool": {
      "Properties": {
        "AllowUnauthenticatedIdentities": true,
        "CognitoIdentityProviders": [
          {
            "ClientId": {
              "Ref": "Client",
            },
            "ProviderName": {
              "Fn::GetAtt": [
                "UserPool",
                "ProviderName",
              ],
            },
            "ServerSideTokenCheck": true,
          },
        ],
        "IdentityPoolName": "UserPool",
      },
      "Type": "AWS::Cognito::IdentityPool",
    },
    "Role": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {
                    "Ref": "IdPool",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
      },
      "Type": "AWS::IAM::Role",
    },
    "UserPool": {
      "Properties": {
        "UserPoolName": {
          "Fn::Join": [
            "-",
            [
              "UserPool",
              {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
      },
      "Type": "AWS::Cognito::UserPool",
    },
  },
}
`;

exports[`dev templates renders dev templates correctly 3`] = `
{
  "Description": "This template creates dev ElasticSearch Cluster",
  "Outputs": {
    "lambda": {
      "Value": {
        "Fn::GetAtt": [
          "Lambda",
          "Arn",
        ],
      },
    },
  },
  "Resources": {
    "InvokePermission": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "Lambda",
            "Arn",
          ],
        },
        "Principal": {
          "Ref": "AWS::AccountId",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "Lambda": {
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "
",
              [
                "exports.handler=function(event,context,callback){",
                "   console.log(JSON.stringify(event,null,2))",
                "   callback(null,event)",
                "}",
              ],
            ],
          },
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "LambdaRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
}
`;
